<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git分布式版本控制工具</title>
      <link href="/archives/e01dd7d7.html"/>
      <url>/archives/e01dd7d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git分布式版本控制工具"><a href="#Git分布式版本控制工具" class="headerlink" title="Git分布式版本控制工具"></a>Git分布式版本控制工具</h1><h2 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h2><ul><li>了解Git基本概念</li><li>能够概述Git工作流程</li><li>能够使用Git常用命令</li><li>熟悉Git代码托管服务</li><li>能够使用idea操作Git</li></ul><h2 id="2、概述"><a href="#2、概述" class="headerlink" title="2、概述"></a>2、概述</h2><h3 id="2-1、开发中的实际场景"><a href="#2-1、开发中的实际场景" class="headerlink" title="2.1、开发中的实际场景"></a>2.1、开发中的实际场景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">场景一:备份</span><br><span class="line">小明负责的模块就要完成了,就在即将release之前的一瞬间,电脑突然蓝屏,硬盘光荣牺牲!几个月来的努力付之东流.</span><br><span class="line">场景二:代码还原</span><br><span class="line">这个项目需要一个很复杂的功能,老王摸索了一个星期终于有了眉目,可是这被改得面目全非的代码已经回不来到从前了.什么地方能买到哆啦A梦的时光机啊?</span><br><span class="line">场景三:协同开发</span><br><span class="line">小刚和小强先后从文件服务器上下载了同一个文件:Analysis.java,小刚在Analysis.java文件中的第30行声明了一个方法,叫count(),先保存到了文件服务器上;小强在Analysis.Java文件中的第50行声明了一个方法,叫sum(),也随后保存到了文件服务器上,于是,count()方法就只存在于小刚的记忆中了</span><br><span class="line">场景四:追溯问题代码的编写人和编写时间</span><br><span class="line">老王是另一位项目经理,每次因为项目进度挨骂之后,他都不知道该扣那个程序员的工资!就拿这次来说吧,有个Bug调试了30多个小时才知道是因为相关属性没有在应用初始化时赋值!可是二胖,王东,刘流和正经牛都不承认是自己干的!</span><br></pre></td></tr></table></figure><h3 id="2-2、版本控制的方式"><a href="#2-2、版本控制的方式" class="headerlink" title="2.2、版本控制的方式"></a>2.2、版本控制的方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.集中式版本控制工具</span><br><span class="line">集中式版本控制工具,版本库是集中存放在中央服务器的,team里每个人work时从服务器下载代码,是必须联网才能工作,局域网或互联网.个人修改然后提交到中央版本库.</span><br><span class="line">举例:SVN和CVS</span><br><span class="line">2.分布式版本控制工具</span><br><span class="line">分布式版本控制系统没有&quot;中央服务器&quot;,每个人的电脑上都是一个完整的版本库,这样工作的时候,无需要联网了,因为版本库就在自己的电脑上.多人协作只需要各自修改推送给对方,就能互相看到对方的修改了.</span><br><span class="line">举例:Git</span><br></pre></td></tr></table></figure><h3 id="2-3、SVN"><a href="#2-3、SVN" class="headerlink" title="2.3、SVN"></a>2.3、SVN</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/svn.png"></p><h3 id="2-4、Git"><a href="#2-4、Git" class="headerlink" title="2.4、Git"></a>2.4、Git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git是分布式的,git不需要有中心服务器,我们每台电脑拥有的东西都是一样的.我们使用git并且有个中心服务器,仅仅是为了方便交换大家 的修改,但是这个服务器的地位和我们每个人夫人pc是一样的.我们可把他当作一个开发者的pc就可以,就是为了大家代码容易交流不关机用的.没有它大家一样可以工作,只不过&quot;交换&quot;修改不方便而已.</span><br><span class="line">git是一个开源的分布式版本控制工具,可以是有效,高速地处理从很小到非常大的项目版本管理.git是Linus Torvalds 为了帮助管理 Linux内核开发而开发的一个开放源码的版本控制软件.</span><br><span class="line">同生活中的许多伟大的事物一样,git诞生于一个极富纷争大举创新的年代.Linux内核开源项目有着为数众多的参与者.绝大多数的Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991-2002年间).到2002年,整个项目组开始启用一个专有的分布式版本控制系统BitKeeper来管理和维护代码.</span><br><span class="line">到了2005年,开发BitKeeper的商业公司同Linux内核开源社区的合作关系结束,他们收回了Linux内核社区免费使用BitKeeper的权利.这就迫使Linux开源社区(也别是Linux的缔造者Linus Torvalds)基于使用BitKeeper时的经验教训,开发出自己的版本系统.她们对新的系统制定了若干目标:</span><br><span class="line">速度</span><br><span class="line">简单的设计</span><br><span class="line">对非线性开发模式的强大支持(允许成千上万个并行开发的分支)</span><br><span class="line">完全分布式</span><br><span class="line">有能力高效管理类似Linux内核一样的超大规模项目(速度和数据量)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/git.png"></p><h3 id="2-5、Git工作流程图"><a href="#2-5、Git工作流程图" class="headerlink" title="2.5、Git工作流程图"></a>2.5、Git工作流程图</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><p>命令如下:</p><ol><li>clone(克隆):从远程仓库中克隆代码到本地仓库</li><li>checkout(检出):从本地仓库中检出一个仓库分支然后进行修订</li><li>add(添加):在提交前先将代码提交到暂存区</li><li>commit(提交):提交到本地仓库.本地仓库中保存修改的各个历史版本</li><li>fetch(抓取):从远程库,抓取到本地仓库,不进行任何的合并动作,一般操作比较少.</li><li>pull(拉取):从远程库拉到本地库,自动进行合并(merge),然后放到工作区,相当于fetch+merge</li><li>push(推送):修改完成后,需要和团队成员共享代码时,将代码推送到远程仓库</li></ol><h2 id="3、Git安装与常用命令"><a href="#3、Git安装与常用命令" class="headerlink" title="3、Git安装与常用命令"></a>3、Git安装与常用命令</h2><p>本教程里的git命令例子都是在Git Bash中演示的,会用到一些基本的Linux命令,在此为大家提前列举:</p><ul><li>ls/ll    查看当前目录</li><li>cat    查看文件内容</li><li>touch 创建文件</li><li>vi     vi编辑器(使用vi编辑器是为了方便展示效果,学员可以记事本,editPlus,notPad++等其他编辑器)</li></ul><h3 id="3-1、Git环境配置"><a href="#3-1、Git环境配置" class="headerlink" title="3.1、Git环境配置"></a>3.1、Git环境配置</h3><h4 id="3-1-1-下载与安装"><a href="#3-1-1-下载与安装" class="headerlink" title="3.1.1 下载与安装"></a>3.1.1 下载与安装</h4><p>下载地址:<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/dowanload.png"></p><p>下载完成后可以得到如下安装文件:</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/exe.png"></p><p>双击下载的安装文件来安装git,安装完成后在电脑桌面(也可以是其他目录)点击右键,如果能够看到如下两个菜单则说明git安装成功.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%88%90%E5%8A%9F.png"></p><p>备注:</p><p>​    Git GUI:Git提供的图形界面工具</p><p>​    Git Bash:Git提供的命令行工具</p><p>​    当安装Git后首先要做的事情是设置用户名称和email地址.这是非常重要的,因为每次Git提交都会使用该用户信息</p><h4 id="3-1-2-基本配置"><a href="#3-1-2-基本配置" class="headerlink" title="3.1.2 基本配置"></a>3.1.2 基本配置</h4><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p><p>git config –global user.name “itcast”</p><p>git config –global user.email “<a href="mailto:&#104;&#x65;&#108;&#x6c;&#x6f;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#x74;&#46;&#99;&#x6e;">&#104;&#x65;&#108;&#x6c;&#x6f;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#x74;&#46;&#99;&#x6e;</a>“</p></li><li><p>查看配置信息</p><p>git config –global user.name</p><p>git config –global user.email</p></li></ol><h4 id="3-1-3为常用指令配置别名-可选"><a href="#3-1-3为常用指令配置别名-可选" class="headerlink" title="3.1.3为常用指令配置别名(可选)"></a>3.1.3为常用指令配置别名(可选)</h4><p>有些常用的指令参数非常多,每次都要输入好多参数,我们可以使用别名.</p><ol><li><p>打开用户目录,创建.bashrc文件</p><p>部分windows系统不允许用户创建点号开头的文件,可以打开gitBash,执行 touch ~/.bashrc</p><p>~表示当前目录的根目录</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/bashrc.png"></p><ol start="2"><li><p>在.bashrc文件中输入如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span></span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure></li><li><p>打开gitBash,执行source ~/.bashrc</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/souce.png"></p><h4 id="3-1-4-解决GitBash乱码问题"><a href="#3-1-4-解决GitBash乱码问题" class="headerlink" title="3.1.4 解决GitBash乱码问题"></a>3.1.4 解决GitBash乱码问题</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E4%B9%B1%E7%A0%81%E8%AE%BE%E7%BD%AE.png"></p><h3 id="3-2、获取本地仓库"><a href="#3-2、获取本地仓库" class="headerlink" title="3.2、获取本地仓库"></a>3.2、获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制,首先需要获得本地仓库</p><p>(1)在电脑的任意位置创建一个空目录(例如test)作为我们的本地Git仓库</p><p>(2)进入这个目录中,点击右键打开Git bash窗口</p><p>(3)执行命令git init</p><p>(4)如果创建成功后可在文件夹下看到隐藏的.git目录</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png"></p><h3 id="3-3、基础操作指令"><a href="#3-3、基础操作指令" class="headerlink" title="3.3、基础操作指令"></a>3.3、基础操作指令</h3><p>Git工作目录(除了.git文件外的目录叫做工作目录)下对于文件的修改(增加,删除,更新)会存在几个状态,这些修改的状态会随着我们执行Git命令而发生变化.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.png"></p><p>本章节主要讲解如何使用命令来控制状态之间的转换:</p><ol><li>git add (工作区–&gt;暂存区)</li><li>git commit (暂存区–&gt;本地仓库)</li></ol><h4 id="3-3-1、查看修改的状态-status"><a href="#3-3-1、查看修改的状态-status" class="headerlink" title="3.3.1、查看修改的状态(status)"></a>3.3.1、查看修改的状态(status)</h4><ul><li>作用:查看的修改的状态(暂存区、工作区)</li><li>命令形式:git status</li></ul><h4 id="3-3-2、添加工作区到暂存区-add"><a href="#3-3-2、添加工作区到暂存区-add" class="headerlink" title="3.3.2、添加工作区到暂存区(add)"></a>3.3.2、添加工作区到暂存区(add)</h4><ul><li><p>作用:添加工作区一个或多个文件的修改到暂存区</p></li><li><p>命令形式:git add 单个文件名|通配符</p><p>将所有修改加入暂存区:git add .(.表示所有)</p></li></ul><h4 id="3-3-3、提交暂存区到本地仓库-commit"><a href="#3-3-3、提交暂存区到本地仓库-commit" class="headerlink" title="3.3.3、提交暂存区到本地仓库(commit)"></a>3.3.3、提交暂存区到本地仓库(commit)</h4><ul><li>作用:提交暂存区内容到本地仓库的当前分支</li><li>命令形式:git commit -m ‘注释内容’</li></ul><h4 id="3-3-4、查看提交日志-log"><a href="#3-3-4、查看提交日志-log" class="headerlink" title="3.3.4、查看提交日志(log)"></a>3.3.4、查看提交日志(log)</h4><p>在3.1.3中配置的别名git-log就包含了这些参数,所以后续可以直接使用指令git-log</p><ul><li><p>作用:查看提交记录</p></li><li><p>命令形式:git log [option]</p><p>options</p><p>​    –all 显示所有分支</p><p>​    –pretty=oneline 将提交信息显示为一行</p><p>​    –abbrev-commit 使得输出得commitld更简短</p><p>​    –graph 以图得形式显示</p></li></ul><h4 id="3-3-5、版本回退"><a href="#3-3-5、版本回退" class="headerlink" title="3.3.5、版本回退"></a>3.3.5、版本回退</h4><ul><li><p>作用:版本切换</p></li><li><p>命令形式:git reset –hard commitID</p><p>commitID可以使用git-log或git log指令查看</p></li><li><p>如何查看已经删除得记录?</p><p>git reflog(把所有的版本操作都记录下来了)</p><p>这个指令可以看到已经删除的提交记录</p><p>注意:</p><p>这里选中即表示已经复制(不需要用CTRL C因为它在Linux中有其他的设置)</p><p>选中之后即表示已经复制好,那么粘贴也不要使用ctrl+v,直接按一下滚轮,或者使用右键,选中粘贴也行.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80.png"></p></li></ul><h4 id="3-3-6、添加文件至忽略列表"><a href="#3-3-6、添加文件至忽略列表" class="headerlink" title="3.3.6、添加文件至忽略列表"></a>3.3.6、添加文件至忽略列表</h4><p>一般我们总会有些文件无需纳入git的管理,也不希望它们总出现在未跟踪文件列表.通常都是些自动生成的文件,比如日志文件,或者编译过程中创建的临时文件等.在这种情况下,我们可以在工作目录中创建一个名为.gitignore的文件(文件名称固定),列出要忽略的文件模式.下面是一个示例:</p><p>在.gitignore文件中写上不需要git管理的文件,表示不需要管理所有的.a的文件.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%A4%BA%E4%BE%8B.png"></p><p>实际操作:</p><p>首先从这个工作目录下打开git bash</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/4.png"></p><p>这里git add有两种方法:(1)git add 文件名;(2)git add’ .表示所有add(这里习惯用这种)</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/5.png"></p><p>修改文件</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/7.png"></p><h3 id="3-4、分支"><a href="#3-4、分支" class="headerlink" title="3.4、分支"></a>3.4、分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支.使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的bug修改,开发新的功能,以免影响开发主线.</p><h4 id="3-4-1、查看本地分支"><a href="#3-4-1、查看本地分支" class="headerlink" title="3.4.1、查看本地分支"></a>3.4.1、查看本地分支</h4><ul><li>命令:git branch</li></ul><h4 id="3-4-2、创建本地分支"><a href="#3-4-2、创建本地分支" class="headerlink" title="3.4.2、创建本地分支"></a>3.4.2、创建本地分支</h4><ul><li>命令:git branch 分支名</li></ul><h4 id="3-4-3、切换分支-checkout"><a href="#3-4-3、切换分支-checkout" class="headerlink" title="3.4.3、切换分支(checkout)"></a>3.4.3、切换分支(checkout)</h4><ul><li><p>命令:git checkout 分支名</p><p>我们还可以直接切换到一个不存在的分支(创建并切换)</p></li><li><p>命令:git checkout -b 分支名</p></li></ul><h4 id="3-4-4、合并分支-merge"><a href="#3-4-4、合并分支-merge" class="headerlink" title="3.4.4、合并分支(merge)"></a>3.4.4、合并分支(merge)</h4><p>一个分支上的提交可以合并到另一个分支</p><p>命令:git merge 分支名称</p><p>合并的快进模式:</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%90%88%E5%B9%B6%E7%9A%84%E5%BF%AB%E8%BF%9B%E6%A8%A1%E5%BC%8F.png"></p><h4 id="3-4-5、删除分支"><a href="#3-4-5、删除分支" class="headerlink" title="3.4.5、删除分支"></a>3.4.5、删除分支</h4><p>不能删除当前分支,只能删除其他分支</p><p>git branch -d b1 删除分支时,需要做各种检查</p><p>git branch -D b1 不做任何检查,强制删除</p><h4 id="3-4-6、解决冲突"><a href="#3-4-6、解决冲突" class="headerlink" title="3.4.6、解决冲突"></a>3.4.6、解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突,例如同时修改了同一个文件的同一行,这时就需要手动解决冲突,解决冲突步骤如下:</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><p>冲突部分的内容处理如下所示:</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%86%B2%E7%AA%81.png"></p><h4 id="3-4-7、开发中分支使用原则与流程"><a href="#3-4-7、开发中分支使用原则与流程" class="headerlink" title="3.4.7、开发中分支使用原则与流程"></a>3.4.7、开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都是以某种形式支持分支.使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的bug修改,开发新的功能,以免影响开发主线.</p><p>在开发中,一般有如下分支使用原则与流程:</p><ul><li><p>master(生产)分支</p><p>线上分支,主分支,中小规模项目作为线上运行的应用对应的分支;</p></li><li><p>develop(开发)分支</p><p>是从master创建的分支,一般作为开发部门的主要开发分支,如果没有其他并行开发不同期上线要求,都可以在此版本进行开发,阶段开发完成后,需要是合并到master分支,准备上线.</p></li><li><p>feature/xxxx分支</p><p>从develop创建的分支.一般是同期并发开发,但不同期上线时创建的分支,分支上的研发任务完成后合并到develop分支.</p></li><li><p>hotfix/xxxx分支</p><p>从master派生的分支,一般作为线上bug修复使用,修复完成后需要合并到master,test,develop分支.</p></li><li><p>还有一些其他分支,在此不再详述,例如test分支(用于代码测试),pre分支(预上线分支)等等.</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%80%E5%8F%91%E4%B8%AD%E5%88%86%E6%94%AF%E7%9A%84%E5%8E%9F%E5%88%99.png"></p><h2 id="4、Git远程仓库"><a href="#4、Git远程仓库" class="headerlink" title="4、Git远程仓库"></a>4、Git远程仓库</h2><h3 id="4-1、常用的托管服务-远程仓库"><a href="#4-1、常用的托管服务-远程仓库" class="headerlink" title="4.1、常用的托管服务[远程仓库]"></a>4.1、常用的托管服务[远程仓库]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前面我们已经知道了Git中存在两种类型的仓库,即本地仓库和远程仓库.那么我么如何搭建Git远程仓库呢?我们可以借助互联网上提供的一些代码托管来实现,其中比较常见的有GitHub,码云,GitLab等.</span><br><span class="line">GitHub(地址:https://github.com/)是一个面向开源及私有软件项目的托管平台,因为只支持git作为唯一的版本库格式进行托管,故名GitHub</span><br><span class="line">码云(地址:https://gitee.com/)是国内的一个代码托管平台,由于服务器在国内,所以相比于GitHub,码云速度会更快.</span><br><span class="line">gitlab(地址:https://about.gitlab.com/)是一个用于仓库管理系统的开源项目,使用git作为代码管理工具,并在此基础上搭建起来的web服务,一般用于企业,学校等内部网络搭建git私服.</span><br></pre></td></tr></table></figure><h3 id="4-2、注册码云"><a href="#4-2、注册码云" class="headerlink" title="4.2、注册码云"></a>4.2、注册码云</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B3%A8%E5%86%8C%E7%A0%81%E4%BA%91.png"></p><h3 id="4-3、创建远程仓库"><a href="#4-3、创建远程仓库" class="headerlink" title="4.3、创建远程仓库"></a>4.3、创建远程仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%931.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%933.png"></p><h3 id="4-4、配置SSH公钥"><a href="#4-4、配置SSH公钥" class="headerlink" title="4.4、配置SSH公钥"></a>4.4、配置SSH公钥</h3><ul><li><p>生成SSH公钥</p><p>ssh-keygen-t rsa</p><p>不断回车</p><p>​    如果公钥已经存在,则自动覆盖</p></li><li><p>Gitee设置账户共公钥</p><p>获取公钥</p><p>​    cat ~/.ssh/id_rsa.pub</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%AC%E9%92%A5.png"></p></li><li><p>验证是否配成功</p><p>ssh-T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#101;&#101;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#101;&#101;&#46;&#x63;&#x6f;&#x6d;</a></p></li></ul><p>后面回答yes即可</p><h3 id="4-5、操作远程仓库"><a href="#4-5、操作远程仓库" class="headerlink" title="4.5、操作远程仓库"></a>4.5、操作远程仓库</h3><h4 id="4-5-1、添加远程仓库"><a href="#4-5-1、添加远程仓库" class="headerlink" title="4.5.1、添加远程仓库"></a>4.5.1、添加远程仓库</h4><p>此操作是先初始化本地库,然后与已创建的远程库进行对接</p><ul><li><p>命令:git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</p><p>远端名称,默认是origin,取决于远端服务器设置</p><p>仓库路径,从远端服务器获取此url</p><p>例如:git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#101;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#101;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>:czbk_zhang_meng/git_test.git</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p></li></ul><h4 id="4-5-2、查看远程仓库"><a href="#4-5-2、查看远程仓库" class="headerlink" title="4.5.2、查看远程仓库"></a>4.5.2、查看远程仓库</h4><ul><li><p>命令:git remote</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p></li></ul><h4 id="4-5-3、推送到远程仓库"><a href="#4-5-3、推送到远程仓库" class="headerlink" title="4.5.3、推送到远程仓库"></a>4.5.3、推送到远程仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p><ul><li><p>命令:git push [-f] [–set-upstream] [远端名称[本地分支名] [:远端分支名]]</p><p>如果远程分支名和本地分支名称相同,则可以只写本地分支</p><p>git push origin master</p><p>-f表示强制覆盖</p><p>–set-upstream推送到远端的同时并且建立起和远端分支的关联关系</p><p>git push –set-upstream origin master</p><p>如果当前分支已经和远端分支关联,则可以省略分支名和远端名</p><p>git push将master分支推送到已关联的远端分支.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8E%A8%E9%80%812.png"></p></li></ul><p>验证是否推上去</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%9F%A5%E8%AF%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p><h4 id="4-5-4、本地分支与远程分支的关联关系"><a href="#4-5-4、本地分支与远程分支的关联关系" class="headerlink" title="4.5.4、本地分支与远程分支的关联关系"></a>4.5.4、本地分支与远程分支的关联关系</h4><ul><li><p>查看关联关系我们可以使用git branch -vv命令</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%9F%A5%E7%9C%8B%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png"></p></li></ul><h4 id="4-5-5、从远程仓库克隆"><a href="#4-5-5、从远程仓库克隆" class="headerlink" title="4.5.5、从远程仓库克隆"></a>4.5.5、从远程仓库克隆</h4><p>如果已经有一个远端仓库,我们可以直接clone到本地</p><ul><li><p>命令:git clone &lt;仓库名称&gt; [本地目录]</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%8B%E9%9A%86.png"></p></li></ul><p>本地目录可以省略,会自动生成一个目录(也就是以.git前面的git_test生成一个本地仓库的目录)</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%8B%E9%9A%861.png"></p><p>对于同一个仓库,一般只克隆一次</p><h4 id="4-5-6、从远程仓库中抓取和拉取"><a href="#4-5-6、从远程仓库中抓取和拉取" class="headerlink" title="4.5.6、从远程仓库中抓取和拉取"></a>4.5.6、从远程仓库中抓取和拉取</h4><p>远程分支和本地分支一样,我们可以进行merge操作,只是需要先把远程仓库里的更新都下载到本地,在进行操作.</p><ul><li><p>抓取命令:git fetch [remote name] [branch name]</p><p>抓取指令就是将仓库里的更新都抓取到本地,不会进行合并</p><p>如果不指定远端名称和分支名,则抓取所有分支</p></li><li><p>拉取命令:git pull [remote name] [branch name]</p><p>拉去指令就是将远端仓库的修改拉到本地并自动进行合并,等同于fetch+merge</p><p>如果不指定远端名称和分支名,则抓取所有并更新当前分支.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8E%A8%E9%80%81.png"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8B%89%E5%8F%96.png"></p><p>注意:</p><p>退出vi编辑器要按esc,然后再输入:wq即退出了</p><h4 id="4-5-7、解决合并冲突"><a href="#4-5-7、解决合并冲突" class="headerlink" title="4.5.7、解决合并冲突"></a>4.5.7、解决合并冲突</h4><p>在一段时间,A,B用户修改了同一个文件,且修改了同一行位置的代码,此时会发生合并冲突.</p><p>A用户在本地修改代码后优先推送到远程仓库,此时B用户再本地修订代码,提交到本地仓库后,也需要推送到远程仓库,此时B用户晚于A用户,故需要先拉取远程仓库的提交,经过合并后才能推送到远端分支,如下图所示.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B3%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png"></p><p>再B用户拉取代码时,因为A,B用户同一段时间修改了同一个文件的相同位置的代码,故会发生合并冲突.</p><p>远程分支也是分支,所有合并冲突的解决方式也和解决本地冲突的方式相同.</p><p>练习:</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%83%E4%B9%A01.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%83%E4%B9%A02.png"></p><h2 id="5、在Idea中使用Git"><a href="#5、在Idea中使用Git" class="headerlink" title="5、在Idea中使用Git"></a>5、在Idea中使用Git</h2><h3 id="5-1、在Idea中配置Git"><a href="#5-1、在Idea中配置Git" class="headerlink" title="5.1、在Idea中配置Git"></a>5.1、在Idea中配置Git</h3><p>安装好Intellij IDEA后,如果Git安装在默认路径下,那么idea会自动找到git的位置,如果更改了Git的安装位置则需要手动配置Git的路劲,选择File-&gt;Settings打开设置窗口,找到Version Control下的git选项:<br><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/idea.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/idea2.png"></p><h3 id="5-2、在Idea中操作Git"><a href="#5-2、在Idea中操作Git" class="headerlink" title="5.2、在Idea中操作Git"></a>5.2、在Idea中操作Git</h3><p>场景:本地已经有一个项目,但是并不是git项目,我们需要将这个放到码云的仓库里,和其他开发人员继续一起协作开发.</p><h4 id="5-2-1、创建项目远程仓库"><a href="#5-2-1、创建项目远程仓库" class="headerlink" title="5.2.1、创建项目远程仓库"></a>5.2.1、创建项目远程仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%931.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%932.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%9B%E5%BB%BA1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%9B%E5%BB%BA2.png"></p><h4 id="5-2-2、初始化本地仓库"><a href="#5-2-2、初始化本地仓库" class="headerlink" title="5.2.2、初始化本地仓库"></a>5.2.2、初始化本地仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png"></p><h4 id="5-2-3、设置远程仓库"><a href="#5-2-3、设置远程仓库" class="headerlink" title="5.2.3、设置远程仓库"></a>5.2.3、设置远程仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AE%BE%E7%BD%AE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AE%BE%E7%BD%AE2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AE%BE%E7%BD%AE3.png"></p><h4 id="5-2-4、提交到本地仓库"><a href="#5-2-4、提交到本地仓库" class="headerlink" title="5.2.4、提交到本地仓库"></a>5.2.4、提交到本地仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8F%90%E4%BA%A41.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8F%90%E4%BA%A42.png"></p><h4 id="5-2-5、推送到远程仓库"><a href="#5-2-5、推送到远程仓库" class="headerlink" title="5.2.5、推送到远程仓库"></a>5.2.5、推送到远程仓库</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8F%90%E4%BA%A43.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%8F%90%E4%BA%A44.png"></p><p>在接下来的完成修改之后也是这样推送到远程仓库,只是和第一次有一些不一样</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E9%87%8D%E6%8E%A81.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E9%87%8D%E6%8E%A82.png"></p><h4 id="5-2-6、克隆远程仓库到本地"><a href="#5-2-6、克隆远程仓库到本地" class="headerlink" title="5.2.6、克隆远程仓库到本地"></a>5.2.6、克隆远程仓库到本地</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%8B%E9%9A%8611.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%8B%E9%9A%8622.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%8B%E9%9A%8633.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%85%8B%E9%9A%8644.png"></p><p>当两个开发在同一文件的统一代码上进行修改时,当第一个完成的能够push上去,后面的这个人就需要先pull一下,merge之后才能推.</p><p>这里演示第二个人要怎么操作解决冲突</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B31.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B32.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B33.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B34.png"></p><p>解决好冲突代码之后要把红色报错部分改成蓝色,所以右击红色文件</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B35.png"></p><p>最后commit然后push上去</p><h4 id="5-2-7、创建分支"><a href="#5-2-7、创建分支" class="headerlink" title="5.2.7、创建分支"></a>5.2.7、创建分支</h4><ul><li><p>最常规的方式</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%86%E6%94%AF1.png"></p></li><li><p>最强大的方式</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%86%E6%94%AF2.png"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%86%E6%94%AF3.png"></p><h4 id="5-2-8、切换分支及其他分支相关的操作"><a href="#5-2-8、切换分支及其他分支相关的操作" class="headerlink" title="5.2.8、切换分支及其他分支相关的操作"></a>5.2.8、切换分支及其他分支相关的操作</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%86%E6%94%AF4.png"></p><h4 id="5-2-9、解决冲突"><a href="#5-2-9、解决冲突" class="headerlink" title="5.2.9、解决冲突"></a>5.2.9、解决冲突</h4><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81.png"></p><h3 id="5-3、IDEA常用GIT操作入口"><a href="#5-3、IDEA常用GIT操作入口" class="headerlink" title="5.3、IDEA常用GIT操作入口"></a>5.3、IDEA常用GIT操作入口</h3><p>1.第一张图上的快捷入口可以基于满足开发的需求</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/idea%E6%93%8D%E4%BD%9C.png"></p><p>2.第二张图是更多在IDEA操作git的入口</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/idea%E6%93%8D%E4%BD%9C1.png"></p><h3 id="5-4、场景分析"><a href="#5-4、场景分析" class="headerlink" title="5.4、场景分析"></a>5.4、场景分析</h3><p>基于我们后面的实战模拟,我们做一个综合练习</p><p>当前的开发环境如下,我们每个人都对这个项目已经开发一段时间,接下来我们要切换成团队开发模式.</p><p>也就是我们由一个团队来完成这个项目实战的内容.团队由组长和若干组员组成(组长就是开发中的项目经理).所有操作在idea中完成.</p><p>来呢西场景如下:</p><p>1.由组长,基于本项目创建本地仓库;创建远程仓库,推送项目到远程仓库.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF1.png"></p><p>2.每一位组员从远程仓库克隆项目到idea中,这样每位同学在自己的电脑上就有了一个工作副本,可以证实的开始开发了.我们模拟两个组员(组员A,组员B),克隆两个工作区.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF2.png"></p><p>3.组员A修改工作区,提交到本地仓库,再推送到远程仓库.组员B可以直接从远程仓库获取最新的代码.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF3.png"></p><p>4.组员A和组员B修改了同一个文件的同一行,提交到本地没有问题,但是推送到远程仓库时,后一个推送操作就会失败.</p><p>解决方法:需要先获取远程仓库的代码到本地仓库,编辑冲突,提交并推送代码.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF4.png"></p><h2 id="附-几条铁令"><a href="#附-几条铁令" class="headerlink" title="附:几条铁令"></a>附:几条铁令</h2><p>1.切换分支前先提交本地的修改</p><p>2.代码及时提交,提交过了就不会丢</p><p>3.遇到任何问题都不要删除文件目录</p><h2 id="附-疑难问题解决"><a href="#附-疑难问题解决" class="headerlink" title="附:疑难问题解决"></a>附:疑难问题解决</h2><p>1.windows下看不到隐藏文件(.bashrc)</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6.png"></p><h2 id="附-IDEA集成GitBash作为Terminal"><a href="#附-IDEA集成GitBash作为Terminal" class="headerlink" title="附:IDEA集成GitBash作为Terminal"></a>附:IDEA集成GitBash作为Terminal</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/terminal.png"></p><h2 id="git常用指令速查"><a href="#git常用指令速查" class="headerlink" title="git常用指令速查"></a>git常用指令速查</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E9%80%9F%E6%9F%A5png.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git基本概念 </tag>
            
            <tag> Git工作流程 </tag>
            
            <tag> Git代码托管 </tag>
            
            <tag> 使用idea操作Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charles抓包工具实战</title>
      <link href="/archives/db3acede.html"/>
      <url>/archives/db3acede.html</url>
      
        <content type="html"><![CDATA[<h1 id="Charles抓包工具实战"><a href="#Charles抓包工具实战" class="headerlink" title="Charles抓包工具实战"></a>Charles抓包工具实战</h1><p>课程目标:</p><ol><li>能够用Charles来分析前后端的问题</li><li>能够用Charles模拟弱网测试</li><li>能使用Charles的断点构建异常的测试场景</li></ol><p>课程介绍:</p><ol><li>Charles简介</li><li>Charles安装与配置</li><li>Charles实战</li></ol><h2 id="Charles简介"><a href="#Charles简介" class="headerlink" title="Charles简介"></a>Charles简介</h2><h3 id="Charles是什么"><a href="#Charles是什么" class="headerlink" title="Charles是什么?"></a>Charles是什么?</h3><p>Charles中文名叫青花瓷,它是一款基于http协议的代理服务器,通过成为电脑或者浏览器的代理,然后截取请求和请求结果达到分析抓包的目的.</p><p>特点:跨平台(Windows上可以用,Linux上也可以用)、半免费(有免费版本和收费版本,免费版本启动等待10秒,使用半小时自动退出)</p><h3 id="Charles的工作原理"><a href="#Charles的工作原理" class="headerlink" title="Charles的工作原理?"></a>Charles的工作原理?</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Charles%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><p>前置步骤:</p><ol><li>需要运行Charles并配置代理</li><li>在客户端上面需要配置代理</li></ol><p>步骤:</p><ol><li>由客户端发送请求</li><li>Charles接收再发送给服务器</li><li>服务器返回请求结果给Charles</li><li>由Charles转发给客户端</li></ol><h3 id="Charles能做什么"><a href="#Charles能做什么" class="headerlink" title="Charles能做什么?"></a>Charles能做什么?</h3><ol><li>支持HTTP及HTTPS代理</li><li>支持流量控制</li><li>支持接口并发请求</li><li>支持重发网络请求</li><li>支持断点调试</li></ol><h3 id="Charles的优点"><a href="#Charles的优点" class="headerlink" title="Charles的优点?"></a>Charles的优点?</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Charles%E7%9A%84%E4%BC%98%E7%82%B9.png"></p><h2 id="Charles的安装和配置"><a href="#Charles的安装和配置" class="headerlink" title="Charles的安装和配置"></a>Charles的安装和配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Charles%E4%B8%8B%E8%BD%BD1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Charles%E4%B8%8B%E8%BD%BD2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Charles%E4%B8%8B%E8%BD%BD3.png"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Charles%E5%AE%89%E8%A3%85.png"></p><h3 id="Charles组件介绍"><a href="#Charles组件介绍" class="headerlink" title="Charles组件介绍"></a>Charles组件介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%84%E4%BB%B61.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%84%E4%BB%B62.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%84%E4%BB%B63.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%84%E4%BB%B64.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E9%85%8D%E7%BD%AE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Windows%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/Windows%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%202.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/macos1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/macos2.png"></p><p>该方法是:Charles安装再windows上抓取macos的包</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/macos3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/ip.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/ip1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/macos5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%89%8B%E6%9C%BA.png"></p><h2 id="Charles实战"><a href="#Charles实战" class="headerlink" title="Charles实战"></a>Charles实战</h2><ol><li>问题分析</li><li>https抓包</li><li>弱网测试</li><li>断点调试</li></ol><p>如果所抓取的包和Charles在同一台电脑上只需做如下配置即可</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/win%E9%85%8D%E7%BD%AE.png"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%982.png"></p><h3 id="https抓包"><a href="#https抓包" class="headerlink" title="https抓包"></a>https抓包</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E4%B9%B1%E7%A0%81.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%81%E4%B9%A6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/windows%E8%AF%81%E4%B9%A6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE1.png"></p><p>上图为代理配置的快捷键</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%81%E4%B9%A62.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%81%E4%B9%A63.png"></p><h3 id="Charles流量配置"><a href="#Charles流量配置" class="headerlink" title="Charles流量配置"></a>Charles流量配置</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B5%81%E9%87%8F%E9%85%8D%E7%BD%AE.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B5%81%E9%87%8F%E9%85%8D%E7%BD%AE2.png"></p><p>参数:</p><ol><li>Bandwidth:带宽,代表上行(请求)和下行(响应)速度</li><li>Utilisation:带宽可用率,大部分选择100%</li><li>Round-trip latency:请求延时,即每发送一个请求需要延时多久</li><li>MTU:最大传输单元,即TCP包最大的size,真实模拟TCP层,每次传输的分包情况</li><li>Reliability:连接可靠性</li><li>Stability:连接稳定性,用于模拟移动网络</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%951.png"></p><p>该图为正常运行的时间</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%952.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%953.png"></p><p>该图为模拟弱网测试的一个运行时间</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%954.png"></p><h3 id="Charles断点配置"><a href="#Charles断点配置" class="headerlink" title="Charles断点配置"></a>Charles断点配置</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%AD%E7%94%B5%E9%85%8D%E7%BD%AE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%AD%E7%94%B5%E9%85%8D%E7%BD%AE2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E4%BE%8B%E5%AD%90.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%B7%E6%B1%821.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%B7%E6%B1%822.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%AF%B7%E6%B1%823.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BB%93%E6%9E%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> Charles </category>
          
          <category> 抓包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charles来分析前后端的问题 </tag>
            
            <tag> Charles模拟弱网测试 </tag>
            
            <tag> Charles的断点构建异常的测试场景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件缺陷及JIRA工具</title>
      <link href="/archives/4470c7c2.html"/>
      <url>/archives/4470c7c2.html</url>
      
        <content type="html"><![CDATA[<h1 id="软件缺陷及JIRA工具"><a href="#软件缺陷及JIRA工具" class="headerlink" title="软件缺陷及JIRA工具"></a>软件缺陷及JIRA工具</h1><p>目标:</p><p>能够说出软件缺陷的信息与跟踪流程</p><p>能够使用JIRA进行缺陷管理</p><p>目录:</p><p>软件缺陷的介绍:</p><ol><li>软件缺陷的信息</li><li>软件缺陷的跟踪流程</li></ol><p>JIRA工具的介绍:</p><ol><li>JIRA的特点和使用者</li><li>JIRA的问题和工作流</li><li>JIRA的使用</li></ol><h2 id="软件缺陷报告的样例"><a href="#软件缺陷报告的样例" class="headerlink" title="软件缺陷报告的样例"></a>软件缺陷报告的样例</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%BC%BA%E9%99%B7%E6%8A%A5%E5%91%8A%E6%A0%B7%E4%BE%8B.png"></p><h2 id="软件缺陷的基本内容"><a href="#软件缺陷的基本内容" class="headerlink" title="软件缺陷的基本内容"></a>软件缺陷的基本内容</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9.png"></p><h2 id="软件缺陷的状态"><a href="#软件缺陷的状态" class="headerlink" title="软件缺陷的状态"></a>软件缺陷的状态</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7%E7%9A%84%E7%8A%B6%E6%80%81.png"></p><p>这是一个正常的软件缺陷的生命周期,还有两种情况少用(拒绝,延迟)</p><h2 id="软件缺陷的严重程度"><a href="#软件缺陷的严重程度" class="headerlink" title="软件缺陷的严重程度"></a>软件缺陷的严重程度</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7%E7%9A%84%E4%B8%A5%E9%87%8D%E7%A8%8B%E5%BA%A6.png"></p><h2 id="软件缺陷的优先级"><a href="#软件缺陷的优先级" class="headerlink" title="软件缺陷的优先级"></a>软件缺陷的优先级</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><h2 id="软件缺陷的类型"><a href="#软件缺陷的类型" class="headerlink" title="软件缺陷的类型"></a>软件缺陷的类型</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7%E7%9A%84%E7%B1%BB%E5%9E%8B.png"></p><h2 id="软件缺陷的跟踪流程"><a href="#软件缺陷的跟踪流程" class="headerlink" title="软件缺陷的跟踪流程"></a>软件缺陷的跟踪流程</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7%E7%9A%84%E8%B7%9F%E8%B8%AA%E6%B5%81%E7%A8%8B.png"></p><h2 id="JIRA的介绍"><a href="#JIRA的介绍" class="headerlink" title="JIRA的介绍"></a>JIRA的介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E4%BB%8B%E7%BB%8D.png"></p><p>jira其实也就是一个浏览器</p><p>jira的介绍:<br><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E4%BB%8B%E7%BB%8D1.png"></p><h2 id="JIRA的使用者"><a href="#JIRA的使用者" class="headerlink" title="JIRA的使用者"></a>JIRA的使用者</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%85.png"></p><h2 id="JIRA的问题"><a href="#JIRA的问题" class="headerlink" title="JIRA的问题"></a>JIRA的问题</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E9%97%AE%E9%A2%98.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E9%97%AE%E9%A2%981.png"></p><h2 id="JIRA的工作流"><a href="#JIRA的工作流" class="headerlink" title="JIRA的工作流"></a>JIRA的工作流</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%811.png"></p><h2 id="JIRA的使用"><a href="#JIRA的使用" class="headerlink" title="JIRA的使用"></a>JIRA的使用</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/jira%E7%9A%84%E4%BD%BF%E7%94%A8.png"></p><h2 id="JIRA的使用-测试提交问题"><a href="#JIRA的使用-测试提交问题" class="headerlink" title="JIRA的使用-测试提交问题"></a>JIRA的使用-测试提交问题</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%B0%E5%BB%BA%E9%97%AE%E9%A2%98.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%B0%E5%BB%BA%E9%97%AE%E9%A2%981.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%B0%E5%BB%BA%E9%97%AE%E9%A2%982.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%96%B0%E5%BB%BA%E9%97%AE%E9%A2%983.png"></p><h2 id="JIRA的使用-开发修复问题"><a href="#JIRA的使用-开发修复问题" class="headerlink" title="JIRA的使用-开发修复问题"></a>JIRA的使用-开发修复问题</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%80%E5%8F%91%E4%BF%AE%E5%A4%8D%E9%97%AE%E9%A2%98.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%80%E5%8F%91%E4%BF%AE%E5%A4%8D%E9%97%AE%E9%A2%981.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%BC%80%E5%8F%91%E4%BF%AE%E5%A4%8D%E9%97%AE%E9%A2%982.png"></p><h2 id="JIRA的使用-测试回归问题"><a href="#JIRA的使用-测试回归问题" class="headerlink" title="JIRA的使用-测试回归问题"></a>JIRA的使用-测试回归问题</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B5%8B%E8%AF%95%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B5%8B%E8%AF%95%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%981.png"></p><p>完结!!!!</p>]]></content>
      
      
      <categories>
          
          <category> JIRA </category>
          
          <category> 缺陷管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件缺陷的信息 </tag>
            
            <tag> 软件缺陷的跟踪流程 </tag>
            
            <tag> JIRA的特点和使用者 </tag>
            
            <tag> JIRA的问题和工作流 </tag>
            
            <tag> JIRA的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑盒测试的用例设计方法</title>
      <link href="/archives/c5309831.html"/>
      <url>/archives/c5309831.html</url>
      
        <content type="html"><![CDATA[<h1 id="黑盒测试的用例设计方法"><a href="#黑盒测试的用例设计方法" class="headerlink" title="黑盒测试的用例设计方法"></a>黑盒测试的用例设计方法</h1><p>目标:</p><ol><li>测试用例基本知识</li><li>黑盒测试用例设计方法</li></ol><h2 id="测试用例的基本知识"><a href="#测试用例的基本知识" class="headerlink" title="测试用例的基本知识"></a>测试用例的基本知识</h2><h3 id="测试用例的定义"><a href="#测试用例的定义" class="headerlink" title="测试用例的定义"></a>测试用例的定义</h3><p>测试用例的定义:是为了特定的目的而设计的一组有测试输入,执行条件,预期结果的案例(文档)</p><h3 id="测试用例的构成要素"><a href="#测试用例的构成要素" class="headerlink" title="测试用例的构成要素"></a>测试用例的构成要素</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E6%9E%84%E6%88%90%E8%A6%81%E7%B4%A0.png"></p><h3 id="测试用例样例图"><a href="#测试用例样例图" class="headerlink" title="测试用例样例图"></a>测试用例样例图</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%A0%B7%E4%BE%8B%E5%9B%BE.png"></p><p>备注:</p><p>在实际工作中根据项目要求对用例设计要素可做调整,上述要素几乎覆盖常见用例设计模板</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>测试用例的定义:软件测试的核心,为了特定目的而设计的一组测试输入,执行条件,预期结果的输出文档</li><li>测试用例构成要素:用例编号,用力标题,测试项目,用力级别,预置条件,测试输入,执行步骤,预期结果</li></ul><h2 id="黑盒测试用例设计方法"><a href="#黑盒测试用例设计方法" class="headerlink" title="黑盒测试用例设计方法"></a>黑盒测试用例设计方法</h2><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95.png"></p><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><p>等价类概念:在所有测试的数据中,具有某种共同特征的数据子集.</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%AD%89%E4%BB%B7%E7%B1%BB1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%AD%89%E4%BB%B7%E7%B1%BB2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%AD%89%E4%BB%B7%E7%B1%BB3png.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E7%AD%89%E4%BB%B7%E7%B1%BB4.png"></p><h3 id="边界值"><a href="#边界值" class="headerlink" title="边界值"></a>边界值</h3><p>大量的错误是发生在输入或输出范围得边界上,而不是在输入范围的内部</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BE%B9%E7%95%8C%E5%80%BC1.png"></p><p>边界值:选取正好等于,刚刚好大于或刚刚好小于边界值作为测试数据</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BE%B9%E7%95%8C%E5%80%BC2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BE%B9%E7%95%8C%E5%80%BC3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BE%B9%E7%95%8C%E5%80%BC4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BE%B9%E7%95%8C%E5%80%BC5.png"></p><h3 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h3><p>使用等价类方法时对于输入域及输入域存在关联时无法覆盖</p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A81.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A82.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A83.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A84.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A85.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A86.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%88%A4%E5%AE%9A%E8%A1%A87.png"></p><h3 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9B%A0%E6%9E%9C%E5%9B%BE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9B%A0%E6%9E%9C%E5%9B%BE2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9B%A0%E6%9E%9C%E5%9B%BE3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9B%A0%E6%9E%9C%E5%9B%BE4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9B%A0%E6%9E%9C%E5%9B%BE5.png"></p><h3 id="状态迁移图法"><a href="#状态迁移图法" class="headerlink" title="状态迁移图法"></a>状态迁移图法</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BF%81%E7%A7%BB%E5%9B%BE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BF%81%E7%A7%BB%E5%9B%BE2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E8%BF%81%E7%A7%BB%E5%9B%BE3.png"></p><h3 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%951.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%952.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%953.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%954.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%955.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%956.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E5%9C%BA%E6%99%AF%E6%B3%957.png"></p><h3 id="正交实验法"><a href="#正交实验法" class="headerlink" title="正交实验法"></a>正交实验法</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%AD%A3%E4%BA%A41.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%AD%A3%E4%BA%A42.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%AD%A3%E4%BA%A43.png"></p><h3 id="错误推测法"><a href="#错误推测法" class="headerlink" title="错误推测法"></a>错误推测法</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E9%94%99%E8%AF%AF%E6%B3%95.png"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ZXY-hhh/picgo/img/%E6%80%BB%E7%BB%932.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
          <category> 黑盒测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试用例设计 </tag>
            
            <tag> 等价类划分 </tag>
            
            <tag> 边界值分析 </tag>
            
            <tag> 判定表法 </tag>
            
            <tag> 因果图法 </tag>
            
            <tag> 状态迁移法 </tag>
            
            <tag> 场景法 </tag>
            
            <tag> 正交实验设计法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
